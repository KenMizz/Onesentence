Index: app/src/main/java/kenmizz/onesentence/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kenmizz.onesentence;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.content.SharedPreferences;\r\nimport android.content.res.Configuration;\r\nimport android.graphics.Color;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.text.method.LinkMovementMethod;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.widget.RadioGroup;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.viewpager.widget.ViewPager;\r\n\r\nimport com.google.android.material.appbar.MaterialToolbar;\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\nimport com.google.android.material.snackbar.Snackbar;\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport com.google.android.material.textfield.TextInputEditText;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\n\r\nimport kenmizz.onesentence.ui.main.SectionsPagerAdapter;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    ArrayList<String> sentencesList = new ArrayList<>();\r\n    HashMap<String, ArrayList<String>> sentenceCollection = new HashMap<>();\r\n\r\n    public static final String SENTENCES_PREFS = \"sentencesPref\";\r\n    public static final String CONFIG_PREFS = \"configsPref\";\r\n    public static final String SENATTR_PREFS = \"SentencesAttributePref\";\r\n    public static final String NOTIFICATION_PREFS = \"NotificationsPref\";\r\n    public static final String SENTENCE_LIST_FILE = \"sentenceList.json\";\r\n    private static final String TAG = \"MainActivity\";\r\n    public static final String CHANNEL_ID = \"OneSentence_NotificationChannel\";\r\n    private int themeOptions = ThemeMode.DEFAULT.ordinal();\r\n    private int newThemeOptions = 0;\r\n\r\n    public enum ThemeMode {\r\n        DEFAULT, LIGHT, GREY, DARK\r\n    }\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        try {\r\n            setUpConfigurations(CONFIG_PREFS);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\r\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            if(notificationManager.getNotificationChannel(CHANNEL_ID) == null) {\r\n                //create new channel if channel not exists\r\n                NotificationChannel channel = new NotificationChannel(CHANNEL_ID, getString(R.string.channel_name), NotificationManager.IMPORTANCE_DEFAULT);\r\n                channel.setDescription(getString(R.string.channel_description));\r\n                notificationManager.createNotificationChannel(channel);\r\n            }\r\n        }\r\n        switch(themeOptions) {\r\n            case 0:\r\n                switch(getUiMode()) {\r\n                    case Configuration.UI_MODE_NIGHT_YES:\r\n                        setTheme(R.style.AppThemeGrey);\r\n                        break;\r\n\r\n                    case Configuration.UI_MODE_NIGHT_NO:\r\n                        setTheme(R.style.AppTheme);\r\n                }\r\n                break;\r\n\r\n            case 1:\r\n                setTheme(R.style.AppTheme);\r\n                break;\r\n\r\n            case 2:\r\n                setTheme(R.style.AppThemeGrey);\r\n                break;\r\n\r\n            case 3:\r\n                setTheme(R.style.AppThemeDark);\r\n        }\r\n        setContentView(R.layout.activity_main);\r\n        try {\r\n            setUpConfigurations(SENTENCES_PREFS);\r\n            setUpConfigurations(SENTENCE_LIST_FILE);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        SectionsPagerAdapter sectionsPagerAdapter = new SectionsPagerAdapter(this, getSupportFragmentManager());\r\n        final ViewPager viewPager = findViewById(R.id.view_pager);\r\n        viewPager.setAdapter(sectionsPagerAdapter);\r\n        TabLayout tabs = findViewById(R.id.mainTabs);\r\n        tabs.setupWithViewPager(viewPager);\r\n        MaterialToolbar mainToolbar = findViewById(R.id.mainToolbar);\r\n        final FloatingActionButton addButton = findViewById(R.id.addFloatingButton);\r\n        mainToolbar.setOnMenuItemClickListener(item -> {\r\n            int itemId = item.getItemId();\r\n            switch (itemId) {\r\n\r\n                default:\r\n                    return true;\r\n\r\n                case R.id.about:\r\n                    showAppDialog(R.layout.about);\r\n                    break;\r\n\r\n                case R.id.themes:\r\n                    showAppDialog(R.layout.themes);\r\n            }\r\n            return true;\r\n        });\r\n        addButton.setOnClickListener(view -> {\r\n            if(viewPager.getCurrentItem() == 1) {\r\n                addSentenceListDialog();\r\n            } else {\r\n                addSentenceDialog();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        syncAllSharedPrefs();\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        syncAllSharedPrefs();\r\n    }\r\n\r\n    public void syncAllSharedPrefs() {\r\n        Log.d(TAG, \"syncing with all SharedPrefs\");\r\n        SharedPreferences configsPrefs = getSharedPreferences(CONFIG_PREFS, MODE_PRIVATE);\r\n        SharedPreferences sentencesPrefs = getSharedPreferences(SENTENCES_PREFS, MODE_PRIVATE);\r\n        SharedPreferences.Editor configEditor = configsPrefs.edit();\r\n        SharedPreferences.Editor sentencesEditor = sentencesPrefs.edit();\r\n        configEditor.putInt(\"themeOptions\", themeOptions);\r\n        configEditor.apply();\r\n        sentencesEditor.clear();\r\n        for( String sentence: sentencesList) {\r\n            sentencesEditor.putString(sentence, sentence);\r\n        }\r\n        sentencesEditor.apply();\r\n        JSONObject SentenceListToJson = new JSONObject(sentenceCollection);\r\n        try {\r\n            OutputStreamWriter outputStreamWriter = new OutputStreamWriter(openFileOutput(SENTENCE_LIST_FILE, MODE_PRIVATE));\r\n            outputStreamWriter.write(SentenceListToJson.toString());\r\n            outputStreamWriter.close();\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        File jsonFile = new File(getFilesDir().getAbsolutePath() + File.separator + SENTENCE_LIST_FILE);\r\n        if(jsonFile.exists()) {\r\n            Log.d(TAG, SENTENCE_LIST_FILE + \" created\");\r\n        }\r\n        Log.d(TAG, \"jsonFile path:\" + jsonFile.getAbsolutePath());\r\n    }\r\n\r\n    public void setUpConfigurations(String PreferencesName) throws IOException {\r\n        switch (PreferencesName) {\r\n            case CONFIG_PREFS:\r\n                SharedPreferences config = getSharedPreferences(PreferencesName, MODE_PRIVATE);\r\n                if(!config.contains(\"themeOptions\")) {\r\n                    SharedPreferences.Editor configEdit = config.edit();\r\n                    configEdit.putInt(\"themeOptions\", themeOptions);\r\n                    configEdit.apply();\r\n                }\r\n                themeOptions = config.getInt(\"themeOptions\", ThemeMode.DEFAULT.ordinal());\r\n                break;\r\n\r\n            case SENTENCES_PREFS:\r\n                SharedPreferences sentences = getSharedPreferences(PreferencesName, MODE_PRIVATE);\r\n                Map<String, ?> Sentences = sentences.getAll();\r\n                if(!Sentences.isEmpty()) {\r\n                    for (Map.Entry<String, ?> Sentence : Sentences.entrySet()) {\r\n                        sentencesList.add(Sentence.getValue().toString());\r\n                    }\r\n                }\r\n            break;\r\n\r\n            case SENTENCE_LIST_FILE:\r\n                File SentenceCollectionJsonFile = new File(getFilesDir().getAbsolutePath() + File.separator + SENTENCE_LIST_FILE);\r\n                if(!SentenceCollectionJsonFile.exists()) {\r\n                    boolean createStatus = SentenceCollectionJsonFile.createNewFile();\r\n                    if(!createStatus) {\r\n                        Log.e(TAG, \"sentenceList.json create failed\");\r\n                    }\r\n                }\r\n                try {\r\n                    FileInputStream fileInputStream = new FileInputStream(SentenceCollectionJsonFile);\r\n                    BufferedReader reader = new BufferedReader(new InputStreamReader(fileInputStream));\r\n                    StringBuilder contentBuilder = new StringBuilder();\r\n                    String line;\r\n                    while ((line = reader.readLine()) != null) {\r\n                        contentBuilder.append(line).append(\"\\n\");\r\n                    }\r\n                    fileInputStream.close();\r\n                    reader.close();\r\n                    JSONObject SentenceCollectionJsonObject = new JSONObject(contentBuilder.toString());\r\n                    Iterator<String> stringIterator = SentenceCollectionJsonObject.keys();\r\n                    while(stringIterator.hasNext()) {\r\n                        String key = stringIterator.next();\r\n                        JSONArray valueArray = SentenceCollectionJsonObject.getJSONArray(key);\r\n                        ArrayList<String> value = new ArrayList<>();\r\n                        for(int i = 0; i < valueArray.length(); i++) {\r\n                            value.add(valueArray.getString(i));\r\n                        }\r\n                        sentenceCollection.put(key, value);\r\n                    }\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n            break;\r\n        }\r\n    }\r\n\r\n    public void addSentenceDialog() {\r\n        final MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);\r\n        View view = LayoutInflater.from(this).inflate(R.layout.sentence_edittext, null);\r\n        final TextInputEditText editText = view.findViewById(R.id.sentenceAddEditText);\r\n        editText.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {\r\n                if(sentencesList.contains(charSequence.toString())) {\r\n                    editText.setError(charSequence.toString() + getString(R.string.sentenceExists));\r\n                }\r\n            }\r\n\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable editable) {\r\n\r\n            }\r\n        });\r\n        dialog.setView(view);\r\n        dialog.setTitle(R.string.newsentence)\r\n                .setPositiveButton(R.string.add, (dialog1, which) -> {\r\n                    String text = Objects.requireNonNull(editText.getText()).toString();\r\n                    if(!text.isEmpty()) {\r\n                        if(!sentencesList.contains(text)) {\r\n                            sentencesList.add(sentencesList.size(), text);\r\n                            Snackbar.make(findViewById(R.id.addFloatingButton), getString(R.string.AlreadyAdd) + text, Snackbar.LENGTH_SHORT).show();\r\n                        } else {\r\n                            Snackbar.make(findViewById(R.id.addFloatingButton), text + getString(R.string.KeyExists), Snackbar.LENGTH_SHORT).show();\r\n                        }\r\n                    }\r\n                })\r\n                .show();\r\n    }\r\n\r\n    public void addSentenceListDialog() {\r\n        View view = LayoutInflater.from(this).inflate(R.layout.sentence_list_edittext, null);\r\n        final TextInputEditText editText = view.findViewById(R.id.sentenceListAddEditText);\r\n        editText.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {\r\n                String text = charSequence.toString();\r\n                if(sentenceCollection.containsKey(text)) {\r\n                    editText.setError(text + getString(R.string.sentenceExists));\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable editable) {\r\n\r\n            }\r\n        });\r\n        MaterialAlertDialogBuilder dialogBuilder = new MaterialAlertDialogBuilder(this)\r\n                .setTitle(R.string.new_sentence_list)\r\n                .setView(view)\r\n                .setPositiveButton(R.string.add, (dialogInterface, i) -> {\r\n                    if(!sentenceCollection.containsKey(Objects.requireNonNull(editText.getText()).toString())) {\r\n                        sentenceCollection.put(editText.getText().toString(), new ArrayList<>());\r\n                        Snackbar.make(findViewById(R.id.addFloatingButton), getString(R.string.successfully_add_sentence_list).replace(\"_key_\", editText.getText().toString()), Snackbar.LENGTH_SHORT).show();\r\n                    } else {\r\n                        Snackbar.make(findViewById(R.id.addFloatingButton), getString(R.string.fail_add_sentence_list).replace(\"_key_\", editText.getText().toString()), Snackbar.LENGTH_SHORT).show();\r\n                    }\r\n                    if(!sentenceCollection.isEmpty()) {\r\n                        findViewById(R.id.emptyListView).setVisibility(View.INVISIBLE);\r\n                    }\r\n                });\r\n        dialogBuilder.show();\r\n    }\r\n\r\n    @SuppressLint({\"InflateParams\", \"NonConstantResourceId\", \"SetTextI18n\"})\r\n    public void showAppDialog(int layoutId) {\r\n        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);\r\n        final View view = getLayoutInflater().inflate(layoutId, null);\r\n        switch(layoutId) {\r\n\r\n            case R.layout.about:\r\n                TextView coolApkLinkView = view.findViewById(R.id.coolApkLinkView);\r\n                TextView githubLinkView = view.findViewById(R.id.githubLinkView);\r\n                coolApkLinkView.setMovementMethod(LinkMovementMethod.getInstance());\r\n                githubLinkView.setMovementMethod(LinkMovementMethod.getInstance());\r\n                coolApkLinkView.setLinkTextColor(Color.BLUE);\r\n                githubLinkView.setLinkTextColor(Color.BLUE);\r\n                dialog.setTitle(R.string.about)\r\n                        .setView(view)\r\n                        .setPositiveButton(R.string.ok, null)\r\n                        .show();\r\n                TextView textView = view.findViewById(R.id.versionView);\r\n                textView.setText(\"v\" + BuildConfig.VERSION_NAME); //comment this when first compile\r\n                break;\r\n\r\n\r\n            case R.layout.themes:\r\n                dialog.setTitle(R.string.theme)\r\n                        .setView(view)\r\n                        .setPositiveButton(R.string.confirmButton, (dialogInterface, i) -> {\r\n                            if(newThemeOptions != themeOptions) {\r\n                                themeOptions = newThemeOptions;\r\n                                syncAllSharedPrefs();\r\n                                recreate();\r\n                            }\r\n                        })\r\n                        .show();\r\n                final RadioGroup group = view.findViewById(R.id.ThemeRadioGroup);\r\n                group.setOnCheckedChangeListener((radioGroup, i) -> {\r\n                    switch (radioGroup.getCheckedRadioButtonId()) {\r\n                        case R.id.follow_system:\r\n                            newThemeOptions = ThemeMode.DEFAULT.ordinal();\r\n                            break;\r\n\r\n                        case R.id.light_mode:\r\n                            newThemeOptions = ThemeMode.LIGHT.ordinal();\r\n                            break;\r\n\r\n                        case R.id.grey_mode:\r\n                            newThemeOptions = ThemeMode.GREY.ordinal();\r\n                            break;\r\n\r\n                        case R.id.dark_mode:\r\n                            newThemeOptions = ThemeMode.DARK.ordinal();\r\n                    }\r\n                });\r\n                switch(themeOptions) {\r\n                    case 0:\r\n                        group.check(R.id.follow_system);\r\n                        break;\r\n\r\n                    case 1:\r\n                        group.check(R.id.light_mode);\r\n                        break;\r\n  \r\n                    case 2:\r\n                        group.check(R.id.grey_mode);\r\n                        break;\r\n\r\n                    case 3:\r\n                        group.check(R.id.dark_mode);\r\n                }\r\n        }\r\n    }\r\n\r\n    public int getUiMode() {\r\n        return getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\r\n    }\r\n\r\n    public ArrayList<String> getSentencesList() {\r\n        return sentencesList;\r\n    }\r\n\r\n    public HashMap<String, ArrayList<String>> getSentenceCollection() { return sentenceCollection; }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/kenmizz/onesentence/MainActivity.java b/app/src/main/java/kenmizz/onesentence/MainActivity.java
--- a/app/src/main/java/kenmizz/onesentence/MainActivity.java	
+++ b/app/src/main/java/kenmizz/onesentence/MainActivity.java	
@@ -182,6 +182,7 @@
             Log.d(TAG, SENTENCE_LIST_FILE + " created");
         }
         Log.d(TAG, "jsonFile path:" + jsonFile.getAbsolutePath());
+        Log.d(TAG, "synced");
     }
 
     public void setUpConfigurations(String PreferencesName) throws IOException {
@@ -238,7 +239,6 @@
                 } catch (Exception e) {
                     e.printStackTrace();
                 }
-            break;
         }
     }
 
